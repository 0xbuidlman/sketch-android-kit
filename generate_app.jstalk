// generate app (ctrl j)

#import 'library/common.js'

/**
 * layout modifiers:
 *  -     export
 */

var BASE_DIR = Document.dir + 'android-app'
var PLUGIN_PATH = [[[CHPluginsController alloc] init] fullPluginPath]

var Android = {}

Android.factors = [
  {name: 'mdpi', scale: 0.75},
  {name: 'hdpi', scale: 1},
  {name: 'xhdpi', scale: 1.5},
  {name: 'xxhdpi', scale: 2}
]

function alert(msg, title){
  title = title || ''
  var app = [NSApplication sharedApplication]
  [app displayDialog:msg withTitle:title]
}

function exportGroups(){
  _.each(Document.artboards(), function(artboard){
    _.each(exportableGroups(artboard.groups()), exportGroup)
  })
}

function exportableGroups(groups){
  return _.filter(groups, function(group){
    var cleanName = _.str.clean(group.name)
    return _.str.startsWith(cleanName, '-')
  })
}

function exportGroup(group){
  _.each(Android.factors, function(factor){
    group.export(BASE_DIR + '/res/drawable-' + factor.name, factor.scale)
  })
}

function createLayouts(){
  _.each(Document.artboards(), createLayout)
}

function createLayout(artboard){
  var outputDir = BASE_DIR + '/res/layout/'
  createDir(outputDir)

  var outputFile = 'activity_' + _.str.javaId(artboard.name) + '.xml'
  var groups = exportableGroups(artboard.groups())
  writeTemplate('layout.xml', outputDir + outputFile, {
    groups: groups.reverse()
  })
}

function writeTemplate(tmpl, path, locals){
  locals = locals || {}

  var filePath = PLUGIN_PATH + '/Plugins/sketch-android-kit/.templates/' + tmpl
  var template = [NSString stringWithContentsOfFile:filePath
                                           encoding:NSUTF8StringEncoding
                                              error:nil]

  var layout = tim(template, locals)
  layout = [NSString stringWithString:layout]
  [layout writeToFile:path atomically:NO]
}

function createDir(path){
  var fm = [NSFileManager defaultManager]
  var dirExists = [fm fileExistsAtPath:path isDirectory:NO]

  if (!dirExists) {
    [fm createDirectoryAtPath:path withIntermediateDirectories:YES
                   attributes:nil error:nil]
  }
}

function cleanup(){
  [[NSFileManager defaultManager] removeItemAtPath:BASE_DIR error:nil]
}

function finished(){
  alert('Your android application has been generated.\n' +
        'Location: ' + BASE_DIR, 'Success!')
}

function setDPI(){
  var defaults = [NSUserDefaults standardUserDefaults]
  var key = 'sketch-android-kit-dpi'

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)]
  [accessory addItemsWithObjectValues:[
    '0.75 (120dpi)',
    '1 (160dpi)',
    '1.5 (240dpi)',
    '2 (320dpi)'
  ]]

  var dpiKey = [defaults integerForKey:key]
  if (dpiKey) {
    [accessory selectItemAtIndex:dpiKey]
  } else {
    [accessory selectItemAtIndex:1]
  }

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:'Pixel Density']
  [alert setInformativeText:'Please select the device pixel density']
  [alert setAccessoryView:accessory]
  [alert runModal]

  var selection = [accessory indexOfSelectedItem]
  [defaults setInteger:selection forKey:key]
  dpi = [0.75, 1, 1.5, 2][selection]
}

function main(){
  if ([doc fileURL] === null) {
    var msg = 'Please save your document.\nThat is where we export your app!'
    return alert(msg, 'Error!')
  }

  setDPI()
  cleanup()
  exportGroups()
  createLayouts()
  finished()
}

main()
